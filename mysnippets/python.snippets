snippet foro
for org_id, api_key in self.api_keys.items():
	${0}
endsnippet

snippet except
except ${1} as ${2}:
	${0}
endsnippet

snippet excepttest
except APIHelperError as ahe:
	raise ${1}("${2}".format(${0}))
endsnippet

snippet trytest
try:
	result = api_helpers.${1}(api_key, ${2})
	print("${3}".format(${4}))

except APIHelperError as ahe:
	raise ${5}("${6}".format("${0}"))
endsnippet

snippet print
print("${1} ".format(${2}))${0}
endsnippet

snippet deftest "Create a test_* function"
def test_${1}(self):
	""" ${2} """
	${0}
endsnippet

snippet deflib "JumpCloud lib function"
def ${1}(api_key: str, ${2}):
	""" ${3}
	:param api_key: str API Key for the Organization we are hitting.

	:raise APIHelperError: If problem arises using the API.
	"""
	${0}
endsnippet

snippet raisex
raise ${1}("${2}".format(${3}))${0}
endsnippet

snippet parx
:param ${1}: ${2}${0}
endsnippet

snippet raix
:raise ${1}: ${2}${0}
endsnippet

snippet raiselib
raise APIHelperError("${1}".format(ahe${0}))
endsnippet

snippet rex
:return: ${1}${0}
endsnippet

snippet nox
# NOTE: ${1}${0}
endsnippet

snippet todox
# TODO: ${1}${0}
endsnippet

snippet bugx
# BUG: ${1}${0}
endsnippet

snippet sysx
import sys
sys.exit(-1)
endsnippet

snippet lcx
log.critical("${1}")${0}
endsnippet

snippet lex
log.error("${1}")${0}
endsnippet

snippet lwx
log.warning("${1}")${0}
endsnippet

snippet lnx
log.notice("${1}")${0}
endsnippet

snippet lix
log.info("${1}")${0}
endsnippet

snippet ldx
log.debug("${1}")${0}
endsnippet

snippet ifmx
if '__name__' == '__main__':
	${0}
endsnippet

snippet mainx
def main():
	""" The main script function. """
	pass${0}
endsnippet

snippet kx
'${1}': ${0},
endsnippet

snippet defasync "basic async function"
async def ${1}():
	""" ${2} """
	${0}
endsnippet

snippet she
#!/usr/bin/env python

${0}
endsnippet

snippet classx "basic class"
class ${1}:
	"""${2} """
	def __init__(self, ${3}):
		self.${0}
endsnippet

snippet prx "make print easier to deal with"
print("${0}")
endsnippet

snippet argsx "template for creating options"
# Configure cmdline arguments.
parser = argparse.ArgumentParser(description=__doc__,
                                 formatter_class=argparse.RawDescriptionHelpFormatter,
                                 epilog="")

parser.add_argument('--verbose', help="Increase logging verbosity.", action="store_true")

args = parser.parse_args()

endsnippet

snippet argx "create add_argument argument."
parser.add_argument('${1}', help="${2}", action="store_true")
endsnippet

snippet logx "template for setting up basic logging"
# Configure logging.
log = logging.getLogger(__name__)
formatter = logging.Formatter('%(asctime)s:%(name)s [%(levelname)s] %(message)s')
handler = logging.StreamHandler()
log.setLevel(logging.DEBUG) if args.verbose else log.setLevel(logging.INFO)
handler.setFormatter(formatter)
log.addHandler(handler)
endsnippet

snippet newfilex
#!/usr/bin/env python
"""
${1}
"""
import logging
import argparse


def main():
    """ Script entry point. """
    ${2}

if __name__ == '__main__':

    # Configure cmdline arguments.
    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog="")
    
    parser.add_argument('--verbose', help="Increase logging verbosity.", action="store_true")
    
    args = parser.parse_args()

    # Configure logging.
    log = logging.getLogger(__name__)
    formatter = logging.Formatter('%(asctime)s:%(name)s [%(levelname)s] %(message)s')
    handler = logging.StreamHandler()
    log.setLevel(logging.DEBUG) if args.verbose else log.setLevel(logging.INFO)
    handler.setFormatter(formatter)
    log.addHandler(handler)

    log.info("Starting....")

    main()
endsnippet
